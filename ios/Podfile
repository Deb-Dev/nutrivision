# Uncomment this line to define a global platform for your project
platform :ios, '15.0' # Increased to match Firebase requirements

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

# Suppress warning about unused master specs repo since CDN is now default
install! 'cocoapods', :warn_for_unused_master_specs_repo => false

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    # Fix deployment target for all targets
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      config.build_settings['STRIP_SWIFT_SYMBOLS'] = 'NO' # Debug symbol consistency
      
      # Enable camera permission for permission_handler
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
        '$(inherited)',
        'PERMISSION_CAMERA=1'
      ]
    end
    
    # Targeted fix for BoringSSL-GRPC source build phase
    if target.name == 'BoringSSL-GRPC'
      # Remove problematic flags from source build phase files
      target.source_build_phase.files.each do |file|
        if file.settings && file.settings['COMPILER_FLAGS']
          flags = file.settings['COMPILER_FLAGS'].split
          # Remove all flags that start with -G or contain GCC_WARN
          flags.reject! { |f| f.start_with?('-G') || f.include?('GCC_WARN') }
          file.settings['COMPILER_FLAGS'] = flags.join(' ')
        end
      end
      
      # Also clean build settings for extra safety
      target.build_configurations.each do |config|
        config.build_settings.delete('GCC_WARN_INHIBIT_ALL_WARNINGS')
        
        # Clean all flag arrays and strings
        ['WARNING_CFLAGS', 'OTHER_CFLAGS', 'OTHER_CPLUSPLUSFLAGS', 'COMPILER_FLAGS'].each do |flag_key|
          if config.build_settings[flag_key].is_a?(Array)
            config.build_settings[flag_key] = config.build_settings[flag_key].reject { |flag| 
              flag.start_with?('-G') || flag.include?('GCC_WARN') 
            }
          elsif config.build_settings[flag_key].is_a?(String)
            config.build_settings[flag_key] = config.build_settings[flag_key]
              .split(' ')
              .reject { |flag| flag.start_with?('-G') || flag.include?('GCC_WARN') }
              .join(' ')
          end
        end
        
        # Ensure proper compiler flags for BoringSSL-GRPC
        config.build_settings['OTHER_CFLAGS'] = '-DOPENSSL_NO_ASM -w -DBORINGSSL_PREFIX=GRPC'
      end
    end
  end
end
