import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:uuid/uuid.dart';
import '../../domain/entities/nutrition_goals.dart';
import '../providers/favorite_meals_provider.dart';
import '../../../../core/providers/auth_providers.dart';

class AddFavoriteMealSheet extends ConsumerStatefulWidget {
  final VoidCallback onMealAdded;

  const AddFavoriteMealSheet({Key? key, required this.onMealAdded})
    : super(key: key);

  @override
  ConsumerState<AddFavoriteMealSheet> createState() =>
      _AddFavoriteMealSheetState();
}

class _AddFavoriteMealSheetState extends ConsumerState<AddFavoriteMealSheet> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _foodItemsController = TextEditingController();

  String _mealType = 'lunch';
  double _calories = 0;
  double _protein = 0;
  double _carbs = 0;
  double _fat = 0;

  bool _isSubmitting = false;

  final mealTypes = ['breakfast', 'lunch', 'dinner', 'snack'];

  @override
  void dispose() {
    _nameController.dispose();
    _foodItemsController.dispose();
    super.dispose();
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });

      try {
        final userId = ref.read(currentUserIdProvider);

        // Create food items from comma-separated list
        final itemTexts = _foodItemsController.text.split(',');
        final foodItems = itemTexts
            .map(
              (text) => FavoriteFoodItem(
                name: text.trim(),
                quantity: 1.0,
                unit: 'serving',
                calories: _calories / itemTexts.length,
                protein: _protein / itemTexts.length,
                carbs: _carbs / itemTexts.length,
                fat: _fat / itemTexts.length,
              ),
            )
            .toList();

        // Create nutritional summary
        final nutrition = NutritionalSummary(
          calories: _calories.toInt(),
          protein: _protein,
          carbs: _carbs,
          fat: _fat,
        );

        // Create favorite meal object
        final favoriteMeal = FavoriteMeal(
          id: '', // ID will be generated by Firebase
          userId: userId,
          name: _nameController.text,
          foodItems: foodItems,
          nutrition: nutrition,
          mealType: _mealType,
          createdAt: DateTime.now(),
          useCount: 0,
        );

        // Save the favorite meal
        await ref
            .read(favoriteMealsProvider.notifier)
            .createFavoriteMeal(userId, favoriteMeal);

        // Check if any errors occurred
        final errorMessage = ref.read(favoriteMealsProvider).errorMessage;
        if (errorMessage != null) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(SnackBar(content: Text('Error: $errorMessage')));
        } else {
          Navigator.of(context).pop();
          widget.onMealAdded();
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('${_nameController.text} added to favorites!'),
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSubmitting = false;
          });
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.only(
        bottom: MediaQuery.of(context).viewInsets.bottom,
      ),
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        ),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Header
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Add Favorite Meal',
                      style: Theme.of(context).textTheme.titleLarge,
                    ),
                    IconButton(
                      icon: const Icon(Icons.close),
                      onPressed: () => Navigator.of(context).pop(),
                    ),
                  ],
                ),

                const SizedBox(height: 16),

                // Meal name field
                TextFormField(
                  controller: _nameController,
                  decoration: const InputDecoration(
                    labelText: 'Meal Name',
                    hintText: 'e.g., Avocado Toast',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a meal name';
                    }
                    return null;
                  },
                ),

                const SizedBox(height: 16),

                // Food items field
                TextFormField(
                  controller: _foodItemsController,
                  decoration: const InputDecoration(
                    labelText: 'Food Items (comma separated)',
                    hintText: 'e.g., Bread, Avocado, Eggs',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter at least one food item';
                    }
                    return null;
                  },
                ),

                const SizedBox(height: 16),

                // Meal type dropdown
                DropdownButtonFormField<String>(
                  value: _mealType,
                  decoration: const InputDecoration(
                    labelText: 'Meal Type',
                    border: OutlineInputBorder(),
                  ),
                  items: mealTypes.map((type) {
                    return DropdownMenuItem(
                      value: type,
                      child: Text(
                        type.substring(0, 1).toUpperCase() + type.substring(1),
                      ),
                    );
                  }).toList(),
                  onChanged: (value) {
                    if (value != null) {
                      setState(() {
                        _mealType = value;
                      });
                    }
                  },
                ),

                const SizedBox(height: 24),

                // Nutrition section title
                Text(
                  'Nutrition Information',
                  style: Theme.of(context).textTheme.titleMedium,
                ),

                const SizedBox(height: 16),

                // Nutrition sliders
                Text('Calories: ${_calories.toInt()} kcal'),
                Slider(
                  value: _calories,
                  min: 0,
                  max: 1000,
                  divisions: 100,
                  label: _calories.round().toString(),
                  onChanged: (value) {
                    setState(() {
                      _calories = value;
                    });
                  },
                ),

                Text('Protein: ${_protein.toStringAsFixed(1)} g'),
                Slider(
                  value: _protein,
                  min: 0,
                  max: 100,
                  divisions: 100,
                  label: _protein.toStringAsFixed(1),
                  onChanged: (value) {
                    setState(() {
                      _protein = value;
                    });
                  },
                ),

                Text('Carbs: ${_carbs.toStringAsFixed(1)} g'),
                Slider(
                  value: _carbs,
                  min: 0,
                  max: 100,
                  divisions: 100,
                  label: _carbs.toStringAsFixed(1),
                  onChanged: (value) {
                    setState(() {
                      _carbs = value;
                    });
                  },
                ),

                Text('Fat: ${_fat.toStringAsFixed(1)} g'),
                Slider(
                  value: _fat,
                  min: 0,
                  max: 100,
                  divisions: 100,
                  label: _fat.toStringAsFixed(1),
                  onChanged: (value) {
                    setState(() {
                      _fat = value;
                    });
                  },
                ),

                const SizedBox(height: 24),

                // Submit button
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: _isSubmitting ? null : _submitForm,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Theme.of(context).primaryColor,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                    child: _isSubmitting
                        ? const CircularProgressIndicator(color: Colors.white)
                        : const Text('Add to Favorites'),
                  ),
                ),

                const SizedBox(height: 16),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
