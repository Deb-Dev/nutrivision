import 'package:freezed_annotation/freezed_annotation.dart';
import '../../../../core/models/meal_models.dart';

part 'meal_plan.freezed.dart';
part 'meal_plan.g.dart';

/// Represents a meal plan, which is a collection of planned meals for specific dates
@freezed
class MealPlan with _$MealPlan {
  const factory MealPlan({
    required String id,
    required String userId,
    required String name,
    required DateTime createdAt,
    DateTime? lastModifiedAt,
    required Map<DateTime, DailyMealPlan> plannedMeals,
    String? description,
    @Default(false) bool isActive,
    @Default(MealPlanSource.user) MealPlanSource source,
    @Default({}) Map<String, dynamic> metadata,
  }) = _MealPlan;

  factory MealPlan.fromJson(Map<String, dynamic> json) =>
      _$MealPlanFromJson(json);
}

/// Represents planned meals for a specific day
@freezed
class DailyMealPlan with _$DailyMealPlan {
  const factory DailyMealPlan({
    required String id,
    required DateTime date,
    required Map<String, PlannedMeal>
    meals, // Key is mealType (breakfast, lunch, dinner, snack)
    @Default(false) bool isCompleted,
    String? notes,
  }) = _DailyMealPlan;

  factory DailyMealPlan.fromJson(Map<String, dynamic> json) =>
      _$DailyMealPlanFromJson(json);
}

/// Represents a specific planned meal (breakfast, lunch, dinner, or snack)
@freezed
class PlannedMeal with _$PlannedMeal {
  const factory PlannedMeal({
    required String id,
    required String mealType,
    required List<PlannedFoodItem> items,
    required NutritionalSummary estimatedNutrition,
    @Default(false) bool isCompleted,
    DateTime? completedAt,
    String? actualMealId, // Reference to the actual logged meal if completed
    String? notes,
    @Default(PlannedMealSource.suggested) PlannedMealSource source,
  }) = _PlannedMeal;

  factory PlannedMeal.fromJson(Map<String, dynamic> json) =>
      _$PlannedMealFromJson(json);
}

/// Represents a food item in a planned meal
@freezed
class PlannedFoodItem with _$PlannedFoodItem {
  const factory PlannedFoodItem({
    required String id,
    required String name,
    required double quantity,
    required String unit,
    @Default({}) Map<String, double> nutritionalValues,
    String? recipeId, // If this is from a recipe
    String? imageUrl,
    String? notes,
  }) = _PlannedFoodItem;

  factory PlannedFoodItem.fromJson(Map<String, dynamic> json) =>
      _$PlannedFoodItemFromJson(json);
}

/// Source of a meal plan
enum MealPlanSource {
  user, // Created manually by the user
  ai, // Generated by AI
  dietitian, // Provided by a dietitian
  template, // Created from a template
}

/// Source of a planned meal
enum PlannedMealSource {
  manual, // Added manually by the user
  suggested, // Suggested by the AI
  favorite, // Added from favorites
  recipe, // From a recipe
}
